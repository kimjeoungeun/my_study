# 문자열(string) : 문자가 나열된 상태
# + : 문자데이터 연결
# * : 문자데이터 반복연결 ->숫자연산자와 쓰임이 다름(추상화)
print("안녕하세요."+"반갑습니다")
print("안녕하세요."*5)
# print("안녕하세요"+10) Error 문자열+숫자 불가(안정함)

# 혼공프로 74P
print("2020년을" + " " + "빛낼" + " " + "프로그래밍" + " " + "입문서!")
print("혼자" + " " + "공부하는" + " " + "첫" +" " + "프로그래밍!")
print("혼공" + "족")
print("혼공" + "프로")
print("혼공" + "파")

print("*" * 2)
print(2 * "*") # 서로 위치를 바꿔도 같은 결과
print(" " * 2 + "*")
print(" " * 3 + 1 * "*")
print(" " * 4 + 1 * "*")
print(" " * 5 + 2 * "*")

# 인덱싱(indexing) : 인덱스로 한 개의 문자를 선택하는 것을 인덱싱이라고 함
# 길이가 있는 다른 타입의 데이터에도 적용 가능(나열된 형태) -> 숫자형 불가
# 기호 : 문자데이터[문자인덱스]
# 인덱스 : 전체 문자열에서 각 문자의 위치(0부터 시작)
print("안녕하세요"[0])
print("안녕하세요"[1])
print("안녕하세요"[2])
print("안녕하세요"[3])
print("안녕하세요"[4])
print("Hello"[-1]) # hello 안에서만 적용되므로 음수는 맨 앞에서 맨 뒤로 넘어감, 긴 숫자에서 마지막 숫자 빼오기 쉬움

# 슬라이싱(slicing) : 나열된 전체 문자열에서 인덱스를 활용해 일부분을 잘라냄
# 길이가 있는 다른 타입의 데이터에도 적용 가능(파이썬의 특징)
# [시작인덱스:끝인덱스]
print("Hello"[1:3])
print("Hello"[2:4])
print("Hello"[:3]) # 앞공백은 처음부터 
print("Hello"[2:]) # 뒷공백은 마지막까지
# print("hello"[100]) # 범위를 넘어서 Error (out of index)

# 길이(len) 함수 : 문자열에서 포함된 문자의 개수
print(len("hello"))

# 함수(funtion) : 특정 동작을 수행하는 코드의 집합
# 함수를 정의(definition)하고 함수를 호출(call)한다. => (함수를 만들고 쓴다)
# 내장함수(built-in) : 파이썬에서 기본적으로 제공하는 함수
# 특별한 설정없이 바로 사용 가능
# print(), len()