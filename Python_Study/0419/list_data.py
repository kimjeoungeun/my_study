# 리스트(list) 자료형
# 여러개의 값을 변수 1개에 저장
[1, 2, 3, 4, 5, 6, 7, 8, 9] #숫자
[1, 1, 1, 1, 1, 1] # 같은숫자
["Hello", "World", "Python"] #글자
[1, "Hello", 2, "Wow"] # 글자, 숫자
[1,2,["Hello","World"]] # 리스트 안의 리스트
[] # 공백가능
# 요소 : 리스트 안의 데이터들 명칭
# 0개 이상 데이터를 가지고 있는 자료형

li_1 = [1,2,3] # 원소 3개
# print(li_1[0])
# print(li_1[1])
# print(li_1[2])
# print(li_1[-1]) # 마지막 인덱스
# print(li_1[0] + li_1[1])
li_2 = [1,2,3,[4,5,6]] # 요소 4개(1,2,3, [리스트하나])

# 인덱싱
print(li_2[3][0]) # 리스트 안의 리스트의 인덱스 추출
[[1,2,3],
[4,5,6],
[7,8,9]] # 2차원 리스트(행열 표현)
# 슬라이싱 (리스트형으로 가져옴)
print(li_2[2:3])
print(li_2[1: ])
print(li_2[ :2])
print(li_2[3][0:2])

print(li_2[0:1]) # 슬라이싱은 리스트로 가져옴
print(li_2[0]) # 인덱싱은 정수형태로 가져옴
li_3=[1,2,3,4,5]
# 출력 결과가 [2,3]이 되도록 만드세요
print(li_3[1:3])
# print(li_3[100]) # 범위 벗어나 오류

print(len(li_3)) # 리스트도 길이 구할 수 있음
# [10,2,3,4,5]
li_3[0] = 10 # 인덱스로 원소값 수정 가능
print(li_3)


# append(원소)
# 리스트의 마지막에 원소를 추가
li_4 = [1,2,3]
li_4.append(4) # 리스트 4번에 추가
li_4.append("문자")
li_4.append([1,2,3])
print(li_4) # [1, 2, 3, 4, '문자', [1, 2, 3]]

# insert(인덱스, 원소)
# 인덱스 위치에 원소를 삽입(리스트에 위치를 지정하여 원소를 추가)
li = [1,2,3]
li.insert(1, 10)
print(li) # [1,10,2,3]

# reomove(값)
# 리스트에서 함수에 입력된 값과 같은 값을 찾아 삭제함
li_5 = [1,2,3,2]
li_5.remove(2) # 같은 원소가 존재할 경우 먼저 나오는 값만 삭제
# li_5.romove(10) # Error 리스트안에 없는 값
print(li_5) # [1,3]

# pop(인덱스)
# 리스트의 인덱스 위치의 요소를 꺼낸다.
# 인덱스를 함수에 전달하지 않으면 제일 마지막 요소를 꺼낸다.
li_6 = [1,2,3,4]
a=li_6.pop() 
print(li_6) # [1,2,3]
print(a) # 4
b=li_6.pop(1) 
print(li_6) # [1,3]
print(b) # 2
# pop으로 꺼낸 원소는 값 자체로 사용 할 수 있다.(remove와 비교)

# index(값)
# 리스트에서 값을 찾아 그 값의 인덱스를 돌려준다. 동작 후 결과를 리턴(반환)
# idx= 인덱스에 값을 저장
li_7=[1,2,3]
idx = li_7.index(2) # 1
# li_7[2] ---> 인덱싱(인덱스로 값에 접근)
# li_7.index(값) ---> 인덱스 알아내기
print(idx)

# sort()
# 리스트의 요소를 정렬한다.
li_8=[5,3,1,4,2]
# li_8.sort()
li_8.sort(reverse=True) #revers()와 서로 다름
print(li_8)

# reverse()
# 리스트의 순서를 뒤집는 함수
# 정렬아님
li_9=[5,3,1,4,2]
li_9.reverse()
print(li_9)

# count(값)
# 리스트 안에서 해당 값이 몇개 있는지 세고 개수를 돌려준다.(리턴, 반환)
li_10=[1,2,3,2]
cnt = li_10.count(2)
print(cnt) # 2

# +연산자
# 리스트를 연결한다.
# extend(리스트) 함수와 같다.
li_01=[1,2,3]
li_02=[4,5,6]
print(li_01+li_02) # 리스트를 합침
li_01.extend(li_02)

# * 연산자
# 리스트를 반복한다.
li_03=[1,2,3]
print(li_03*3) # [1,2,3,1,2,3,1,2,3]