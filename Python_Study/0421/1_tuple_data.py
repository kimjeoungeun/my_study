# tuple(튜플)형
# 튜플은 소괄호() 사용한 자료(리스트는 대괄호[]사용)
# 나열된 형태의 자료형
# 튜플은 요소(element)의 값을 수정할 수 없다.
# mutable / immutable
# mutable : 수정 가능
# list, dictionay
# immutable : 수정 불가능
# int(정수), float(소수), str(문자), tuple
# 수정을 절대로 하면 안되는 데이터들(원본)을 튜플로 사용

# 파이썬은 변수 이름, 값을 따로 관리

# 리스트와 튜플 차이
# my_list=[1,2,3]
# my_list[0] = 5
# print(my_list)

# my_tuple=(1,2,3)
# my_tuple[0]=5 # Error 튜플형은 수정 불가능

# tuple1=("hellw", "world", "python") # 글자
# t2=(1,2,3,4,5) # 숫자
# t3=(1,2,"hello") # 글자, 숫자
# t4=1,2,3 # 괄호 생략가능(가독성위해 꼭 괄호 쓸것)
# t5=(1,2,(3,4,5)) # 튜플 안의 튜플

# 튜플의 연산
# +,*는 연결의 의미이므로 사용가능
# 값을 수정하는게 아니고 새로운 값을 만들어내는 것
# t6=tuple1+t2
# t7=t3*2
# t7=t3*4 # 고정된 값을 바꾼게 아니고 고정된 다른 값으로 이동
# print(t7)

# 사용할 수 있는 함수
# 인덱스 슬라이싱 길이:len()
# 인덱싱, 슬라이싱 차이
# print(t3[2]) # 인덱싱은 값의 데이터타입으로 가져와서 수정 가능
# print(t3[0:2]) # 슬라이싱을 해도 타입이 바뀌지 않아 수정 불가능:튜플형 그대로
# print(len(t3))
# print(t5[2][1]) # 튜플 안의 튜플 인덱싱 가능
# print(t5[2][1:3]) # 튜플 안의 튜플 슬라이싱 가능(튜플형)

# t8=(5,3,1,4,2)
# print(t8.sort()) # 인덱스 안의 값이 수정되므로 불가능
# 값 추가 불가(+로 연결하는 형태로는 가능)

# 튜플 사용처 ex. 계좌, 좌표 등

# for 문 사용 가능(iterable한 값)
# for i in t8:
#     print(i) # 순서가 있는 데이터이므로 인덱스 순서대로 들어간다.

